{"version":3,"sources":["webpack:///./docs/dev/orient-router-menu.zh-CN.md"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,6pCAA6pC;AACxtC,OAAO;AACP;AACA;AACA,UAAU,kLAAkL;AAC5L;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ufAAuf,2SAA2S,uiCAAuiC,yTAAyT,gDAAgD,oFAAoF,4CAA4C,mNAAmN,qLAAqL,mLAAmL,sNAAsN,6OAA6O;AAChzG,OAAO;AACP;AACA;AACA,sDAAsD,qBAAqB,8JAA8J,gCAAgC,OAAO,EAAE,GAAG,MAAM,mEAAmE,eAAe,sBAAsB;AACnY;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yGAAyG,kuBAAkuB,uYAAuY,4FAA4F,qYAAqY,4FAA4F,yYAAyY,8FAA8F;AACtvE,OAAO;AACP;AACA;AACA,eAAe,yHAAyH,qFAAqF,UAAU,mFAAmF,UAAU,uFAAuF,YAAY;AACva;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,4iBAA4iB;AACvmB,OAAO;AACP;AACA;AACA,UAAU,iGAAiG;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,kBAAkB;AACvD,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uHAAuH,8jBAA8jB,+tBAA+tB,sHAAsH;AAC1gD,OAAO;AACP;AACA;AACA,gCAAgC,8GAA8G,2HAA2H,oCAAoC;AAC7S;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yGAAyG,qjBAAqjB,4VAA4V,2HAA2H;AACrnC,OAAO;AACP;AACA;AACA,eAAe,qGAAqG,0CAA0C,yCAAyC;AACvM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4QAA4Q,wgBAAwgB,2JAA2J,wgBAAwgB;AACv7C,OAAO;AACP;AACA;AACA,0CAA0C,kFAAkF,gBAAgB,kFAAkoJAAoJ,oRAAoR,0CAA0C;AACld,OAAO;AACP;AACA;AACA,yBAAyB,6CAA6C;AACtfile":"docs/dev/orient-router-menu.zh-CN.md.js","sourcesContent":["module.exports = {\n  \"content\": [\n    \"article\",\n    [\n      \"blockquote\",\n      [\n        \"p\",\n        \"这里我们复用了 antd-pro 中的 \",\n        [\n          \"code\",\n          \"路由和菜单\"\n        ],\n        \"，并没有重复造轮子，因为它已经足够的优秀，但是基于它我们又做了一些封装和扩展。\"\n      ]\n    ],\n    [\n      \"p\",\n      \"在浏览器支持 \",\n      [\n        \"a\",\n        {\n          \"title\": null,\n          \"href\": \"https://developer.mozilla.org/zh-CN/docs/Web/API/History\"\n        },\n        \"History API\"\n      ],\n      \" 之后，很多网站为了提升用户体验都采用了基于 History 的单页面（SPA）方式，这种方式在页面切换时几乎不需要等待，页面也不会出现白屏，在用户体验上有非常大的提升。采用 SPA 的方式，所有页面路由都需要在前端代码中进行定义，在 React 领域通常使用 \",\n      [\n        \"a\",\n        {\n          \"title\": null,\n          \"href\": \"https://reacttraining.com/react-router/\"\n        },\n        \"react-router\"\n      ],\n      \" 方案，而蚩尤内部也是基于该方案来实现的。\"\n    ],\n    [\n      \"h2\",\n      \"基本结构\"\n    ],\n    [\n      \"p\",\n      \"在这一部分，脚手架通过结合一些配置文件、基本算法及工具函数，搭建好了路由和菜单的基本框架，主要涉及以下几个模块/功能：\"\n    ],\n    [\n      \"ul\",\n      [\n        \"li\",\n        [\n          \"p\",\n          [\n            \"code\",\n            \"路由管理\"\n          ],\n          \" - 通过约定的语法根据在 \",\n          [\n            \"code\",\n            \"config/config.ts\"\n          ],\n          \" 中配置路由。\"\n        ]\n      ],\n      [\n        \"li\",\n        [\n          \"p\",\n          [\n            \"code\",\n            \"菜单管理\"\n          ],\n          \" - 独立于路由管理，根据额外的配置来生成菜单。静态配置可通过 \",\n          [\n            \"code\",\n            \"src/layouts/MenuDisplayItem.json\"\n          ],\n          \" 进行配合，同样也支持动态配置，即从服务端读取菜单权限数据进行菜单展示。\"\n        ]\n      ],\n      [\n        \"li\",\n        [\n          \"p\",\n          [\n            \"code\",\n            \"面包屑\"\n          ],\n          \" - 组件 PageHeaderWrapper 中内置的面包屑,也可通过 RouteContext 提供的信息自定义生成。\"\n        ]\n      ]\n    ],\n    [\n      \"p\",\n      \"下面简单介绍下各个模块的基本思路，如果你对实现过程不感兴趣，只想了解应该怎么实现相关需求，可以直接查看\",\n      [\n        \"a\",\n        {\n          \"title\": null,\n          \"href\": \"#需求实例\"\n        },\n        \"需求实例\"\n      ],\n      \"。\"\n    ],\n    [\n      \"h2\",\n      \"路由\"\n    ],\n    [\n      \"p\",\n      \"目前脚手架中所有的路由都通过 \",\n      [\n        \"code\",\n        \"config/config.ts\"\n      ],\n      \" 来统一管理，如 name，icon，hideChildrenInMenu，authority，都可以用来辅助生成菜单。其中：\"\n    ],\n    [\n      \"pre\",\n      {\n        \"lang\": \"json\",\n        \"highlighted\": \"<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"name\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"dashboard\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"icon\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"dashboard\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"hideInMenu\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"hideChildrenInMenu\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"hideInBreadcrumb\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"authority\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"admin\\\"</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span>\"\n      },\n      [\n        \"code\",\n        \"{\\n  \\\"name\\\": \\\"dashboard\\\",\\n  \\\"icon\\\": \\\"dashboard\\\",\\n  \\\"hideInMenu\\\": true,\\n  \\\"hideChildrenInMenu\\\": true,\\n  \\\"hideInBreadcrumb\\\": true,\\n  \\\"authority\\\": [\\\"admin\\\"]\\n}\"\n      ]\n    ],\n    [\n      \"ul\",\n      [\n        \"li\",\n        [\n          \"p\",\n          \"name 和 icon 分别代表生成菜单项的文本和图标。\"\n        ]\n      ],\n      [\n        \"li\",\n        [\n          \"p\",\n          \"hideChildrenInMenu 用于隐藏不需要在菜单中展示的子路由。例如通常一些表示增删改的路由并不需要展示在菜单中，但它们确实是需要存在的，默认 \",\n          [\n            \"code\",\n            \"false\"\n          ],\n          \"。\"\n        ]\n      ],\n      [\n        \"li\",\n        [\n          \"p\",\n          \"hideInMenu 可以在菜单中不展示这个路由，包括子路由，默认 \",\n          [\n            \"code\",\n            \"false\"\n          ],\n          \"。\"\n        ]\n      ],\n      [\n        \"li\",\n        [\n          \"p\",\n          \"hideInBreadcrumb 当前路由在面包屑中不展现，默认 \",\n          [\n            \"code\",\n            \"false\"\n          ],\n          \"。\"\n        ]\n      ],\n      [\n        \"li\",\n        [\n          \"p\",\n          \"authority 用来配置这个路由的权限，如果配置了将会验证当前用户的权限，并决定是否展示。详见：\",\n          [\n            \"a\",\n            {\n              \"title\": null,\n              \"href\": \"/docs/dev/orient-authority\"\n            },\n            \"权限管理\"\n          ],\n          \"。\"\n        ]\n      ]\n    ],\n    [\n      \"blockquote\",\n      [\n        \"p\",\n        \"你可能注意到配置中的 name 和菜单实际展示的不同，这是因为我们使用了全球化组件的原因，具体参见 国际化\"\n      ]\n    ],\n    [\n      \"h2\",\n      \"菜单\"\n    ],\n    [\n      \"p\",\n      \"菜单根据 \",\n      [\n        \"code\",\n        \"src/layouts/MenuDisplayItem.json\"\n      ],\n      \" 生成，但是通常我们并不会在该文件中定义，而是从服务器获取菜单数据。\"\n    ],\n    [\n      \"h2\",\n      \"从服务器请求菜单\"\n    ],\n    [\n      \"p\",\n      \"你可以在 \",\n      [\n        \"code\",\n        \"src/layouts/BasicLayout.tsx\"\n      ],\n      \" 中修改 menuDataRender，并在代码中发起 http 请求，只需服务器返回下面格式的 json 即可。\"\n    ],\n    [\n      \"pre\",\n      {\n        \"lang\": \"javascript\",\n        \"highlighted\": \"<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>menuData<span class=\\\"token punctuation\\\">,</span> setMenuData<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 这里是一个演示用法</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 真实项目中建议使用 XMLHttpRequest 或 Fetch</span>\\n  <span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/layouts/MenuDisplayItem.json'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>response <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> response<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">setMenuData</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">||</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token operator\\\">...</span>\\n\\n<span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>ProLayout\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// ...</span>\\n    menuDataRender<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> menuData<span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// ...</span>\\n  <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\"\n      },\n      [\n        \"code\",\n        \"const [menuData, setMenuData] = useState([]);\\n\\nuseEffect(() => {\\n  // 这里是一个演示用法\\n  // 真实项目中建议使用 XMLHttpRequest 或 Fetch\\n  fetch('/layouts/MenuDisplayItem.json')\\n    .then(response => response.json())\\n    .then(data => {\\n      setMenuData(data || []);\\n    });\\n}, []);\\n\\n...\\n\\nreturn (\\n  <ProLayout\\n    // ...\\n    menuDataRender={() => menuData}\\n    // ...\\n  />\\n);\"\n      ]\n    ],\n    [\n      \"p\",\n      \"menuData 数据格式如下，ts 定义在此：MenuDataItem\"\n    ],\n    [\n      \"pre\",\n      {\n        \"lang\": \"json\",\n        \"highlighted\": \"<span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">\\\"path\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"/dashboard\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"name\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"dashboard\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"icon\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"dashboard\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"children\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token property\\\">\\\"path\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"/dashboard/analysis\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token property\\\">\\\"name\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"analysis\\\"</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token property\\\">\\\"path\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"/dashboard/monitor\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token property\\\">\\\"name\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"monitor\\\"</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token property\\\">\\\"path\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"/dashboard/workplace\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token property\\\">\\\"name\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"workplace\\\"</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  // ....\\n<span class=\\\"token punctuation\\\">]</span>\"\n      },\n      [\n        \"code\",\n        \"[\\n  {\\n    \\\"path\\\": \\\"/dashboard\\\",\\n    \\\"name\\\": \\\"dashboard\\\",\\n    \\\"icon\\\": \\\"dashboard\\\",\\n    \\\"children\\\": [\\n      {\\n        \\\"path\\\": \\\"/dashboard/analysis\\\",\\n        \\\"name\\\": \\\"analysis\\\"\\n      },\\n      {\\n        \\\"path\\\": \\\"/dashboard/monitor\\\",\\n        \\\"name\\\": \\\"monitor\\\"\\n      },\\n      {\\n        \\\"path\\\": \\\"/dashboard/workplace\\\",\\n        \\\"name\\\": \\\"workplace\\\"\\n      }\\n    ]\\n  }\\n  // ....\\n]\"\n      ]\n    ],\n    [\n      \"blockquote\",\n      [\n        \"p\",\n        \"注意 path 必须要在 config.ts 中定义。（约定式路由不需要，只需页面真实有效即可）注意 如果没有选用 typescript，config.js 中菜单的嵌套写法，需要把 \\\"children\\\" 换成 \\\"routes\\\"。\"\n      ]\n    ],\n    [\n      \"h2\",\n      \"面包屑\"\n    ],\n    [\n      \"p\",\n      \"面包屑由 PageHeaderWrapper 实现，Layout 将 根据 MenuData 生成的 breadcrumb，并通过 PageHeaderWrapper 将其展现。\"\n    ],\n    [\n      \"h2\",\n      \"需求实例\"\n    ],\n    [\n      \"p\",\n      \"上面对这部分的实现概要进行了介绍，接下来通过实际的案例来说明具体该怎么做。\"\n    ],\n    [\n      \"h2\",\n      \"菜单跳转到外部地址\"\n    ],\n    [\n      \"p\",\n      \"你可以直接将完整 url 填入 path 中，框架会自动处理。\"\n    ],\n    [\n      \"pre\",\n      {\n        \"lang\": \"json\",\n        \"highlighted\": \"<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"path\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"https://baidu.com\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"target\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"_blank\\\"</span><span class=\\\"token punctuation\\\">,</span> // 点击新窗口打开\\n  <span class=\\\"token property\\\">\\\"name\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"文档\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span>\"\n      },\n      [\n        \"code\",\n        \"{\\n  \\\"path\\\": \\\"https://baidu.com\\\",\\n  \\\"target\\\": \\\"_blank\\\", // 点击新窗口打开\\n  \\\"name\\\": \\\"文档\\\"\\n}\"\n      ]\n    ],\n    [\n      \"h2\",\n      \"新增页面\"\n    ],\n    [\n      \"p\",\n      \"脚手架默认提供了一种布局模板，详见：\",\n      [\n        \"a\",\n        {\n          \"title\": null,\n          \"href\": \"/docs/dev/orient-layout\"\n        },\n        \"[布局]\"\n      ],\n      \"：\",\n      [\n        \"code\",\n        \"基础布局 - BasicLayout\"\n      ],\n      \"，具体展示效果如图所示：\"\n    ],\n    [\n      \"div\",\n      {\n        \"style\": \"text-align: center; margin: 40px 0px;\"\n      },\n      [\n        \"img\",\n        {\n          \"width\": \"100%\",\n          \"src\": \"https://s2.ax1x.com/2020/01/27/1nDf6e.png\"\n        }\n      ]\n    ],\n    [\n      \"p\",\n      \"如果你的页面可以利用这种布局，那么只需要在路由配置中增加一条即可：\"\n    ],\n    [\n      \"pre\",\n      {\n        \"lang\": \"json\",\n        \"highlighted\": \"// config/config.ts<span class=\\\"token operator\\\">:</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"path\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"/\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"component\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"../layouts/BasicLayout\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"routes\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    // user manage\\n    <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token property\\\">\\\"name\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"用户管理\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token property\\\">\\\"icon\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"smile\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token property\\\">\\\"path\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"/user\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token property\\\">\\\"component\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"./User\\\"</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    // ... add your routes\\n  <span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span>\"\n      },\n      [\n        \"code\",\n        \"// config/config.ts:\\n{\\n  \\\"path\\\": \\\"/\\\",\\n  \\\"component\\\": \\\"../layouts/BasicLayout\\\",\\n  \\\"routes\\\": [\\n    // user manage\\n    {\\n      \\\"name\\\": \\\"用户管理\\\",\\n      \\\"icon\\\": \\\"smile\\\",\\n      \\\"path\\\": \\\"/user\\\",\\n      \\\"component\\\": \\\"./User\\\"\\n    }\\n    // ... add your routes\\n  ]\\n}\"\n      ]\n    ],\n    [\n      \"p\",\n      \"同时在 \",\n      [\n        \"code\",\n        \"src/layouts/MenuDisplayItem.json\"\n      ],\n      \" 中增加一条用于菜单显示，服务端获取方式同理：\"\n    ],\n    [\n      \"pre\",\n      {\n        \"lang\": \"json\",\n        \"highlighted\": \"<span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">\\\"name\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"系统管理\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"icon\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"smile\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"routes\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n      // user manage\\n      <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">\\\"name\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"用户管理\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"path\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"/user\\\"</span> <span class=\\\"token punctuation\\\">}</span>\\n      // ... add your menus\\n    <span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">]</span>\"\n      },\n      [\n        \"code\",\n        \"[\\n  {\\n    \\\"name\\\": \\\"系统管理\\\",\\n    \\\"icon\\\": \\\"smile\\\",\\n    \\\"routes\\\": [\\n      // user manage\\n      { \\\"name\\\": \\\"用户管理\\\", \\\"path\\\": \\\"/user\\\" }\\n      // ... add your menus\\n    ]\\n  }\\n]\"\n      ]\n    ],\n    [\n      \"p\",\n      \"加好后，会默认生成相关的路由及导航。\"\n    ],\n    [\n      \"h2\",\n      \"新增布局\"\n    ],\n    [\n      \"p\",\n      \"在脚手架中我们通过嵌套路由来实现布局模板。config.ts 是一个数组，其中第一级数据就是我们的布局，如果你需要新增布局可以再直接增加一个新的一级数据。\"\n    ],\n    [\n      \"pre\",\n      {\n        \"lang\": \"javascript\",\n        \"highlighted\": \"module<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// app</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    path<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/'</span><span class=\\\"token punctuation\\\">,</span>\\n    component<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'../layouts/BasicLayout'</span><span class=\\\"token punctuation\\\">,</span>\\n    routes<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// new</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    path<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/new'</span><span class=\\\"token punctuation\\\">,</span>\\n    component<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'../layouts/new_page'</span><span class=\\\"token punctuation\\\">,</span>\\n    routes<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">]</span>\"\n      },\n      [\n        \"code\",\n        \"module.exports = [\\n  // app\\n  {\\n    path: '/',\\n    component: '../layouts/BasicLayout',\\n    routes: [...]\\n  },\\n  // new\\n  {\\n    path: '/new',\\n    component: '../layouts/new_page',\\n    routes: [...]\\n  },\\n]\"\n      ]\n    ],\n    [\n      \"h2\",\n      \"在菜单中使用自定义图标\"\n    ],\n    [\n      \"p\",\n      \"只需要直接在 icon 属性上配置即可，如果是个 url，Pro 会自动处理为一个 img 标签。\"\n    ],\n    [\n      \"blockquote\",\n      [\n        \"p\",\n        \"如果你想使用 iconfont 的图标，你可以使用 \",\n        [\n          \"a\",\n          {\n            \"title\": null,\n            \"href\": \"/components/icon\"\n          },\n          \"自定义图标\"\n        ]\n      ]\n    ],\n    [\n      \"h2\",\n      \"常见问题\"\n    ],\n    [\n      \"h2\",\n      \"为什么浏览器里的地址都带着\"\n    ],\n    [\n      \"p\",\n      \"前端路由通常有两种实现方式：HashHistory 和 BrowserHistory，路由都带着 \",\n      [\n        \"code\",\n        \"#\"\n      ],\n      \" 说明使用的是 HashHistory。这两种方式优缺点如下：\"\n    ],\n    [\n      \"table\",\n      [\n        \"thead\",\n        [\n          \"tr\",\n          [\n            \"th\",\n            \"特点\\\\方案\"\n          ],\n          [\n            \"th\",\n            \"HashRouter\"\n          ],\n          [\n            \"th\",\n            \"BrowserRouter\"\n          ]\n        ]\n      ],\n      [\n        \"tbody\",\n        [\n          \"tr\",\n          [\n            \"td\",\n            \"美观度\"\n          ],\n          [\n            \"td\",\n            \"不好，有 # 号\"\n          ],\n          [\n            \"td\",\n            \"好\"\n          ]\n        ],\n        [\n          \"tr\",\n          [\n            \"td\",\n            \"易用性\"\n          ],\n          [\n            \"td\",\n            \"简单\"\n          ],\n          [\n            \"td\",\n            \"中等，需要 server 配合\"\n          ]\n        ],\n        [\n          \"tr\",\n          [\n            \"td\",\n            \"依赖 server\"\n          ],\n          [\n            \"td\",\n            \"不依赖\"\n          ],\n          [\n            \"td\",\n            \"依赖\"\n          ]\n        ],\n        [\n          \"tr\",\n          [\n            \"td\",\n            \"跟锚点功能冲突\"\n          ],\n          [\n            \"td\",\n            \"冲突\"\n          ],\n          [\n            \"td\",\n            \"不冲突\"\n          ]\n        ],\n        [\n          \"tr\",\n          [\n            \"td\",\n            \"兼容性\"\n          ],\n          [\n            \"td\",\n            \"IE8\"\n          ],\n          [\n            \"td\",\n            \"IE10\"\n          ]\n        ]\n      ]\n    ],\n    [\n      \"p\",\n      \"开发者可以根据自己的实际情况选择对应方案。\"\n    ],\n    [\n      \"h2\",\n      \"如何使用 HashHistory？\"\n    ],\n    [\n      \"p\",\n      \"默认框架使用的是 BrowserHistory，所以你可以在 \",\n      [\n        \"code\",\n        \"config/config.ts\"\n      ],\n      \" 中这样来开启 HashHistory：\"\n    ],\n    [\n      \"pre\",\n      {\n        \"lang\": \"javascript\",\n        \"highlighted\": \"<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// ...</span>\\n  history<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"hash\\\"</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\"\n      },\n      [\n        \"code\",\n        \"export default {\\n  // ...\\n  history: \\\"hash\\\"\\n  // ...\\n};\"\n      ]\n    ]\n  ],\n  \"meta\": {\n    \"category\": \"开发\",\n    \"order\": 4,\n    \"title\": \"路由和菜单\",\n    \"filename\": \"docs/dev/orient-router-menu.zh-CN.md\"\n  },\n  \"toc\": [\n    \"ul\",\n    [\n      \"li\",\n      [\n        \"a\",\n        {\n          \"className\": \"bisheng-toc-h2\",\n          \"href\": \"#基本结构\",\n          \"title\": \"基本结构\"\n        },\n        \"基本结构\"\n      ]\n    ],\n    [\n      \"li\",\n      [\n        \"a\",\n        {\n          \"className\": \"bisheng-toc-h2\",\n          \"href\": \"#路由\",\n          \"title\": \"路由\"\n        },\n        \"路由\"\n      ]\n    ],\n    [\n      \"li\",\n      [\n        \"a\",\n        {\n          \"className\": \"bisheng-toc-h2\",\n          \"href\": \"#菜单\",\n          \"title\": \"菜单\"\n        },\n        \"菜单\"\n      ]\n    ],\n    [\n      \"li\",\n      [\n        \"a\",\n        {\n          \"className\": \"bisheng-toc-h2\",\n          \"href\": \"#从服务器请求菜单\",\n          \"title\": \"从服务器请求菜单\"\n        },\n        \"从服务器请求菜单\"\n      ]\n    ],\n    [\n      \"li\",\n      [\n        \"a\",\n        {\n          \"className\": \"bisheng-toc-h2\",\n          \"href\": \"#面包屑\",\n          \"title\": \"面包屑\"\n        },\n        \"面包屑\"\n      ]\n    ],\n    [\n      \"li\",\n      [\n        \"a\",\n        {\n          \"className\": \"bisheng-toc-h2\",\n          \"href\": \"#需求实例\",\n          \"title\": \"需求实例\"\n        },\n        \"需求实例\"\n      ]\n    ],\n    [\n      \"li\",\n      [\n        \"a\",\n        {\n          \"className\": \"bisheng-toc-h2\",\n          \"href\": \"#菜单跳转到外部地址\",\n          \"title\": \"菜单跳转到外部地址\"\n        },\n        \"菜单跳转到外部地址\"\n      ]\n    ],\n    [\n      \"li\",\n      [\n        \"a\",\n        {\n          \"className\": \"bisheng-toc-h2\",\n          \"href\": \"#新增页面\",\n          \"title\": \"新增页面\"\n        },\n        \"新增页面\"\n      ]\n    ],\n    [\n      \"li\",\n      [\n        \"a\",\n        {\n          \"className\": \"bisheng-toc-h2\",\n          \"href\": \"#新增布局\",\n          \"title\": \"新增布局\"\n        },\n        \"新增布局\"\n      ]\n    ],\n    [\n      \"li\",\n      [\n        \"a\",\n        {\n          \"className\": \"bisheng-toc-h2\",\n          \"href\": \"#在菜单中使用自定义图标\",\n          \"title\": \"在菜单中使用自定义图标\"\n        },\n        \"在菜单中使用自定义图标\"\n      ]\n    ],\n    [\n      \"li\",\n      [\n        \"a\",\n        {\n          \"className\": \"bisheng-toc-h2\",\n          \"href\": \"#常见问题\",\n          \"title\": \"常见问题\"\n        },\n        \"常见问题\"\n      ]\n    ],\n    [\n      \"li\",\n      [\n        \"a\",\n        {\n          \"className\": \"bisheng-toc-h2\",\n          \"href\": \"#为什么浏览器里的地址都带着\",\n          \"title\": \"为什么浏览器里的地址都带着\"\n        },\n        \"为什么浏览器里的地址都带着\"\n      ]\n    ],\n    [\n      \"li\",\n      [\n        \"a\",\n        {\n          \"className\": \"bisheng-toc-h2\",\n          \"href\": \"#如何使用-HashHistory？\",\n          \"title\": \"如何使用 HashHistory？\"\n        },\n        \"如何使用 HashHistory？\"\n      ]\n    ]\n  ]\n};"],"sourceRoot":""}