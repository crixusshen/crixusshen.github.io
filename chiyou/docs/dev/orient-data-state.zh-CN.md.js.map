{"version":3,"sources":["webpack:///./docs/dev/orient-data-state.zh-CN.md"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,kBAAkB;AACvD,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2UAA2U,iJAAiJ,+KAA+K,qNAAqN,yFAAyF,sIAAsI,4FAA4F,2MAA2M,8CAA8C,4CAA4C;AACh8C,OAAO;AACP;AACA;AACA,gGAAgG,cAAc,uGAAuG,KAAK,GAAG;AAC7N;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mOAAmO,kNAAkN,wcAAwc,kdAAkd,kGAAkG,6JAA6J,0CAA0C;AACxnD,OAAO;AACP;AACA;AACA,+CAA+C,8BAA8B,iGAAiG,gHAAgH,gBAAgB,mBAAmB;AACjU;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2dAA2d,qXAAqX,sPAAsP,oFAAoF,4CAA4C;AACtsC,OAAO;AACP;AACA;AACA,iGAAiG,kFAAkF,8CAA8C,EAAE,GAAG;AACtO;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oXAAoX,6OAA6O,wJAAwJ,6IAA6I,iMAAiM,mDAAmD,qFAAqF,yPAAyP,8FAA8F,gTAAgT,0CAA0C,gDAAgD,wFAAwF,4IAA4I,4KAA4K,mDAAmD,qFAAqF,8FAA8F,qFAAqF,yXAAyX,gLAAgL,0TAA0T,oFAAoF,gDAAgD,wFAAwF,kJAAkJ,0CAA0C,sFAAsF,0CAA0C;AACt/H,OAAO;AACP;AACA;AACA,4EAA4E,qCAAqC,6BAA6B,kBAAkB,gCAAgC,UAAU,GAAG,+CAA+C,gBAAgB,8DAA8D,OAAO,MAAM,iBAAiB,cAAc,UAAU,GAAG,YAAY,GAAG,+DAA+D,mBAAmB,yEAAyE,EAAE,OAAO,MAAM,wBAAwB,KAAK;AACzlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2UAA2U,iJAAiJ,oPAAoP,2FAA2F,oDAAoD,2KAA2K,wIAAwI,sPAAsP,qJAAqJ,0FAA0F,oFAAoF,8CAA8C,iLAAiL,2FAA2F,6FAA6F,0CAA0C,2CAA2C,2KAA2K,2FAA2F,kDAAkD,4FAA4F,qNAAqN,gGAAgG,yIAAyI,mFAAmF,sIAAsI,yFAAyF,oQAAoQ,0CAA0C,2MAA2M,8CAA8C,4CAA4C,wQAAwQ,iDAAiD,qQAAqQ,mJAAmJ,uNAAuN;AACtzJ,OAAO;AACP;AACA;AACA,gGAAgG,0CAA0C,aAAa,WAAW,cAAc,gBAAgB,8CAA8C,6BAA6B,QAAQ,EAAE,KAAK,gBAAgB,aAAa,eAAe,EAAE,cAAc,aAAa,SAAS,aAAa,sDAAsD,kBAAkB,+BAA+B,8BAA8B,2BAA2B,KAAK,GAAG,6BAA6B,QAAQ,qBAAqB,wBAAwB,UAAU;AAC7nfile":"docs/dev/orient-data-state.zh-CN.md.js","sourcesContent":["module.exports = {\n  \"content\": [\n    \"article\",\n    [\n      \"p\",\n      \"状态管理通常是一个应用最复杂的部分，React 原生提供了 setState, Context 等方式来实现本地与全局状态管理，对于更复杂的业务场景，原生方案也不能完全满足需求，因此社区中产生了大量状态管理框架来解决这个问题，比较有名的诸如 Redux、 Mobx，但是这些框架引入了很多概念，有不小的学习成本，而且滥用框架也会带来一定性能上的问题。因此蚩尤从易用性与性能上出发，使用 \",\n      [\n        \"a\",\n        {\n          \"title\": null,\n          \"href\": \"https://dvajs.com/\"\n        },\n        \"Dva\"\n      ],\n      \" 作为轻量级的状态管理方案。\"\n    ],\n    [\n      \"div\",\n      {\n        \"style\": \"text-align: center; margin: 40px 0px;\"\n      },\n      [\n        \"img\",\n        {\n          \"width\": \"100%\",\n          \"src\": \"https://s2.ax1x.com/2020/01/30/1lmqDU.png\"\n        }\n      ]\n    ],\n    [\n      \"h2\",\n      \"快速上手\"\n    ],\n    [\n      \"p\",\n      \"框架内部已经集成了 Dva 和路由处理，我们不需要关心这些集成细节，下面我们通过一个简单的示例来深入理解整个数据状态的概念和处理流程，假设我们需要开发一个 \",\n      [\n        \"code\",\n        \"用户登录\"\n      ],\n      \" 的功能：\"\n    ],\n    [\n      \"ol\",\n      [\n        \"li\",\n        [\n          \"p\",\n          \"编写 \",\n          [\n            \"code\",\n            \"用户登录\"\n          ],\n          \" 的 UI Component；\"\n        ]\n      ],\n      [\n        \"li\",\n        [\n          \"p\",\n          \"定义路由；\"\n        ]\n      ],\n      [\n        \"li\",\n        [\n          \"p\",\n          \"定义 Service；\"\n        ]\n      ],\n      [\n        \"li\",\n        [\n          \"p\",\n          \"定义 Model；\"\n        ]\n      ],\n      [\n        \"li\",\n        [\n          \"p\",\n          \"将上述涉及模块连起来。\"\n        ]\n      ]\n    ],\n    [\n      \"h2\",\n      \"编写用户登录的 UI Component\"\n    ],\n    [\n      \"p\",\n      \"随着应用的发展，我们可能需要在多个页面分享 UI 元素 (或在一个页面使用多次)，因此我们会把部分抽象成 UI Component。\"\n    ],\n    [\n      \"blockquote\",\n      [\n        \"p\",\n        \"这里我们隐藏了很多实现细节，只是为了展示整个数据状态的处理流程。\"\n      ]\n    ],\n    [\n      \"pre\",\n      {\n        \"lang\": \"javascript\",\n        \"highlighted\": \"<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// pages/user/login/index.tsx:</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Login</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span><span class=\\\"token operator\\\">&lt;</span>LoginProps<span class=\\\"token punctuation\\\">,</span> LoginState<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// ...</span>\\n      <span class=\\\"token operator\\\">&lt;</span>Button<span class=\\\"token operator\\\">></span>登录<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Button<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>登录结果：未登录<span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// ...</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\"\n      },\n      [\n        \"code\",\n        \"// pages/user/login/index.tsx:\\nclass Login extends Component<LoginProps, LoginState> {\\n  render() {\\n    return (\\n      // ...\\n      <Button>登录</Button>\\n      <div>登录结果：未登录<div>\\n      // ...\\n    );\\n  }\\n}\"\n      ]\n    ],\n    [\n      \"h2\",\n      \"定义路由\"\n    ],\n    [\n      \"p\",\n      \"路由可以理解为是组成应用的不同页面，通过约定式方式在下面的文件中进行定义，具体请参看：\",\n      [\n        \"a\",\n        {\n          \"title\": null,\n          \"href\": \"/docs/dev/orient-router-menu\"\n        },\n        \"路由和菜单\"\n      ],\n      \"。\"\n    ],\n    [\n      \"pre\",\n      {\n        \"lang\": \"javascript\",\n        \"highlighted\": \"<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// config/config.ts:</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// ...</span>\\n  routes<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n      path<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"/user\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      component<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"../layouts/UserLayout\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      routes<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n          name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"login\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n          path<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"/user/login\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n          component<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"./user/login\\\"</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\"\n      },\n      [\n        \"code\",\n        \"// config/config.ts:\\nexport default {\\n  // ...\\n  routes: [\\n    {\\n      path: \\\"/user\\\",\\n      component: \\\"../layouts/UserLayout\\\",\\n      routes: [\\n        {\\n          name: \\\"login\\\",\\n          path: \\\"/user/login\\\",\\n          component: \\\"./user/login\\\"\\n        }\\n      ]\\n    }\\n  ]\\n  // ...\\n};\"\n      ]\n    ],\n    [\n      \"p\",\n      \"这样你就可以通过 \",\n      [\n        \"code\",\n        \"/user/login\"\n      ],\n      \" 的访问路径来展示上面的 UI Component。\"\n    ],\n    [\n      \"h2\",\n      \"定义 Service\"\n    ],\n    [\n      \"p\",\n      \"Service 是用于处理服务端通信的逻辑处理，具体请参看：\",\n      [\n        \"a\",\n        {\n          \"title\": null,\n          \"href\": \"/docs/dev/orient-request\"\n        },\n        \"服务器通信\"\n      ],\n      \"。\"\n    ],\n    [\n      \"pre\",\n      {\n        \"lang\": \"javascript\",\n        \"highlighted\": \"<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// services/login.ts:</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fakeAccountLogin</span><span class=\\\"token punctuation\\\">(</span>params<span class=\\\"token punctuation\\\">:</span> LoginParamsType<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 这里你应该调用服务端同事为你准备好的api或者mock api</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">request</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"/api/login/account\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n    method<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"POST\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    data<span class=\\\"token punctuation\\\">:</span> params\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\"\n      },\n      [\n        \"code\",\n        \"// services/login.ts:\\nexport async function fakeAccountLogin(params: LoginParamsType) {\\n  // 这里你应该调用服务端同事为你准备好的api或者mock api\\n  return request(\\\"/api/login/account\\\", {\\n    method: \\\"POST\\\",\\n    data: params\\n  });\\n}\"\n      ]\n    ],\n    [\n      \"h2\",\n      \"定义 Model\"\n    ],\n    [\n      \"p\",\n      \"完成 UI 后，现在开始正式处理数据和逻辑。\"\n    ],\n    [\n      \"p\",\n      \"通过 model 的概念可以把一个领域的数据模型管理起来，包含同步更新 state 的 reducers，以及处理异步逻辑的 effects，还有订阅数据源的 subscriptions。\"\n    ],\n    [\n      \"pre\",\n      {\n        \"lang\": \"javascript\",\n        \"highlighted\": \"<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// models/login.ts:</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token keyword\\\">const</span> Model<span class=\\\"token punctuation\\\">:</span> LoginModelType <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  namespace<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'login'</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  state<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    status<span class=\\\"token punctuation\\\">:</span> undefined<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  reducers<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">changeLoginStatus</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> payload <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">setAuthority</span><span class=\\\"token punctuation\\\">(</span>payload<span class=\\\"token punctuation\\\">.</span>currentAuthority<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token operator\\\">...</span>state<span class=\\\"token punctuation\\\">,</span>\\n        status<span class=\\\"token punctuation\\\">:</span> payload<span class=\\\"token punctuation\\\">.</span>status<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  effects<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token operator\\\">*</span><span class=\\\"token function\\\">login</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> payload <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> call<span class=\\\"token punctuation\\\">,</span> put <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> response <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>fakeAccountLogin<span class=\\\"token punctuation\\\">,</span> payload<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token function\\\">put</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n        type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'changeLoginStatus'</span><span class=\\\"token punctuation\\\">,</span>\\n        payload<span class=\\\"token punctuation\\\">:</span> response<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  subscriptions<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\"\n      },\n      [\n        \"code\",\n        \"// models/login.ts:\\nexport default const Model: LoginModelType = {\\n  namespace: 'login',\\n\\n  state: {\\n    status: undefined,\\n  },\\n\\n  reducers: {\\n    changeLoginStatus(state, { payload }) {\\n      setAuthority(payload.currentAuthority);\\n      return {\\n        ...state,\\n        status: payload.status,\\n      };\\n    },\\n  },\\n\\n  effects: {\\n    *login({ payload }, { call, put }) {\\n      const response = yield call(fakeAccountLogin, payload);\\n      yield put({\\n        type: 'changeLoginStatus',\\n        payload: response,\\n      });\\n    },\\n  },\\n\\n  subscriptions: {},\\n};\"\n      ]\n    ],\n    [\n      \"p\",\n      \"在这个 model 里：\"\n    ],\n    [\n      \"ul\",\n      [\n        \"li\",\n        [\n          \"p\",\n          [\n            \"code\",\n            \"namespace\"\n          ],\n          \" 表示在全局 state 上的 key\"\n        ]\n      ],\n      [\n        \"li\",\n        [\n          \"p\",\n          [\n            \"code\",\n            \"state\"\n          ],\n          \" 是该领域的数据状态，可在这里定义初始值\"\n        ]\n      ],\n      [\n        \"li\",\n        [\n          \"p\",\n          [\n            \"code\",\n            \"reducers\"\n          ],\n          \" 等同于 redux 里的 reducer，接收 action，同步更新 state\"\n        ]\n      ],\n      [\n        \"li\",\n        [\n          \"p\",\n          [\n            \"code\",\n            \"effects\"\n          ],\n          \" 用于执行异步操作，即主要调用 services\"\n        ]\n      ]\n    ],\n    [\n      \"h2\",\n      \"将上述涉及模块连起来\"\n    ],\n    [\n      \"p\",\n      \"到这里，我们已经单独完成了 model 和 component，那么他们如何串联起来呢?\"\n    ],\n    [\n      \"p\",\n      \"Dva 提供了 connect 方法。如果你熟悉 redux，这个 connect 就是 react-redux 的 connect 。\"\n    ],\n    [\n      \"p\",\n      \"接下去让我们重新编辑 UI Component 文件：\"\n    ],\n    [\n      \"pre\",\n      {\n        \"lang\": \"javascript\",\n        \"highlighted\": \"<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// pages/user/login/index.tsx:</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Login</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span><span class=\\\"token operator\\\">&lt;</span>LoginProps<span class=\\\"token punctuation\\\">,</span> LoginState<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">handleSubmit</span><span class=\\\"token punctuation\\\">(</span>values<span class=\\\"token punctuation\\\">:</span> LoginParamsType<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> dispatch <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'login/login'</span><span class=\\\"token punctuation\\\">,</span>\\n      payload<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token operator\\\">...</span>values<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> userLogin <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> status <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> userLogin<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// ...</span>\\n      <span class=\\\"token operator\\\">&lt;</span>Button onSubmit<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleSubmit<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>登录<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Button<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>登录结果：<span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">!</span>status <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">\\\"未登录\\\"</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"已登录\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// ...</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token function\\\">connect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> login <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">:</span> ConnectState<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  userLogin<span class=\\\"token punctuation\\\">:</span> login<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>Login<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\"\n      },\n      [\n        \"code\",\n        \"// pages/user/login/index.tsx:\\nclass Login extends Component<LoginProps, LoginState> {\\n  handleSubmit(values: LoginParamsType){\\n    const { dispatch } = this.props;\\n    dispatch({\\n      type: 'login/login',\\n      payload: {\\n        ...values,\\n      },\\n    });\\n  }\\n\\n  render() {\\n    const { userLogin = {} } = this.props;\\n    const { status } = userLogin;\\n    return (\\n      // ...\\n      <Button onSubmit={this.handleSubmit}>登录</Button>\\n      <div>登录结果：{ !status ? \\\"未登录\\\" : \\\"已登录\\\" }<div>\\n      // ...\\n    );\\n  }\\n}\\n\\nexport default connect(({ login }: ConnectState) => ({\\n  userLogin: login,\\n}))(Login);\"\n      ]\n    ],\n    [\n      \"p\",\n      \"在这个 UI Component 里：\"\n    ],\n    [\n      \"ul\",\n      [\n        \"li\",\n        [\n          \"p\",\n          [\n            \"code\",\n            \"dispatch\"\n          ],\n          \" 用于调用 model 中的 effects，type 为 namespace/effects key，这样就可以调用到 login model 中的 login generator 函数\"\n        ]\n      ],\n      [\n        \"li\",\n        [\n          \"p\",\n          [\n            \"code\",\n            \"connect\"\n          ],\n          \" 则是将 model 中的数据状态与 UI 连起来，一旦连起来后就可以在 UI 层通过 props 来获取到需要的 state\"\n        ]\n      ]\n    ],\n    [\n      \"p\",\n      [\n        \"br\"\n      ]\n    ],\n    [\n      \"p\",\n      \"至此，我们完成了一个简单的 \",\n      [\n        \"code\",\n        \"用户登录\"\n      ],\n      \" 模块开发，你只要理解了这个示例，应该也对整个数据状态的管理流程有了深入的认识，通过 Dva 可以更加有条理的管理好我们的数据状态，而且相比 redux 一些同类型的状态管理解决方案，我们的学习成本也降低了很多。\"\n    ]\n  ],\n  \"meta\": {\n    \"category\": \"开发\",\n    \"order\": 7,\n    \"title\": \"数据状态管理\",\n    \"filename\": \"docs/dev/orient-data-state.zh-CN.md\"\n  },\n  \"toc\": [\n    \"ul\",\n    [\n      \"li\",\n      [\n        \"a\",\n        {\n          \"className\": \"bisheng-toc-h2\",\n          \"href\": \"#快速上手\",\n          \"title\": \"快速上手\"\n        },\n        \"快速上手\"\n      ]\n    ],\n    [\n      \"li\",\n      [\n        \"a\",\n        {\n          \"className\": \"bisheng-toc-h2\",\n          \"href\": \"#编写用户登录的-UI-Component\",\n          \"title\": \"编写用户登录的 UI Component\"\n        },\n        \"编写用户登录的 UI Component\"\n      ]\n    ],\n    [\n      \"li\",\n      [\n        \"a\",\n        {\n          \"className\": \"bisheng-toc-h2\",\n          \"href\": \"#定义路由\",\n          \"title\": \"定义路由\"\n        },\n        \"定义路由\"\n      ]\n    ],\n    [\n      \"li\",\n      [\n        \"a\",\n        {\n          \"className\": \"bisheng-toc-h2\",\n          \"href\": \"#定义-Service\",\n          \"title\": \"定义 Service\"\n        },\n        \"定义 Service\"\n      ]\n    ],\n    [\n      \"li\",\n      [\n        \"a\",\n        {\n          \"className\": \"bisheng-toc-h2\",\n          \"href\": \"#定义-Model\",\n          \"title\": \"定义 Model\"\n        },\n        \"定义 Model\"\n      ]\n    ],\n    [\n      \"li\",\n      [\n        \"a\",\n        {\n          \"className\": \"bisheng-toc-h2\",\n          \"href\": \"#将上述涉及模块连起来\",\n          \"title\": \"将上述涉及模块连起来\"\n        },\n        \"将上述涉及模块连起来\"\n      ]\n    ]\n  ]\n};"],"sourceRoot":""}