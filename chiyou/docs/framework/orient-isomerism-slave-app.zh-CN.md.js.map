{"version":3,"sources":["webpack:///./docs/framework/orient-isomerism-slave-app.zh-CN.md"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ohBAAohB,yRAAyR,4CAA4C,qaAAqa,iOAAiO,sLAAsL,ubAAub,4CAA4C,gaAAga,sdAAsd,4CAA4C;AAC1hG,OAAO;AACP;AACA;AACA,mMAAmM,2CAA2C,GAAG,4FAA4F,uBAAuB,gEAAgE,GAAG,uFAAuF,uEAAuE,GAAG;AACxkB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,E","file":"docs/framework/orient-isomerism-slave-app.zh-CN.md.js","sourcesContent":["module.exports = {\n  \"content\": [\n    \"article\",\n    [\n      \"p\",\n      \"如果你的团队有自己的前端技术栈(如 vue/react/angular 等)，甚至是使用服务端 Web 技术(如 php/java web/.net 等)作为自己的技术栈，那么下面的介绍将比较适合你。\"\n    ],\n    [\n      \"h2\",\n      \"子应用导出相应的生命周期钩子\"\n    ],\n    [\n      \"p\",\n      \"子应用需要在自己的入口 js 文件(通常就是你配置的 webpack 的 entry js) 中导出 bootstrap、mount、unmount 三个生命周期钩子事件，以提供框架应用在适当的时机调用。\"\n    ],\n    [\n      \"pre\",\n      {\n        \"lang\": \"javascript\",\n        \"highlighted\": \"<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n * bootstrap 事件只会在 子应用 初始化的时候调用一次，下次 子应用 重新进入时会直接调用 mount 钩子事件，不会再重复触发 bootstrap 事件。\\n * 通常我们可以在这里做一些全局变量的初始化，比如不会在 unmount 阶段被销毁的应用级别的缓存等。\\n */</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">bootstrap</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"react app bootstraped\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n * 子应用每次进入都会调用 mount 事件，通常我们在这里触发应用的渲染方法\\n */</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">mount</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  ReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&lt;</span>App <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"root\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n * 子应用每次 切换/卸载 会调用的事件，通常在这里会卸载子应用的应用实例\\n */</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">unmount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  ReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unmountComponentAtNode</span><span class=\\\"token punctuation\\\">(</span>document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"root\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\"\n      },\n      [\n        \"code\",\n        \"/**\\n * bootstrap 事件只会在 子应用 初始化的时候调用一次，下次 子应用 重新进入时会直接调用 mount 钩子事件，不会再重复触发 bootstrap 事件。\\n * 通常我们可以在这里做一些全局变量的初始化，比如不会在 unmount 阶段被销毁的应用级别的缓存等。\\n */\\nexport async function bootstrap() {\\n  console.log(\\\"react app bootstraped\\\");\\n}\\n\\n/**\\n * 子应用每次进入都会调用 mount 事件，通常我们在这里触发应用的渲染方法\\n */\\nexport async function mount(props) {\\n  console.log(props);\\n  ReactDOM.render(<App />, document.getElementById(\\\"root\\\"));\\n}\\n\\n/**\\n * 子应用每次 切换/卸载 会调用的事件，通常在这里会卸载子应用的应用实例\\n */\\nexport async function unmount() {\\n  ReactDOM.unmountComponentAtNode(document.getElementById(\\\"root\\\"));\\n}\"\n      ]\n    ]\n  ],\n  \"meta\": {\n    \"category\": \"指南\",\n    \"order\": 6,\n    \"title\": \"异构类子应用开发或迁移\",\n    \"filename\": \"docs/framework/orient-isomerism-slave-app.zh-CN.md\"\n  },\n  \"toc\": [\n    \"ul\",\n    [\n      \"li\",\n      [\n        \"a\",\n        {\n          \"className\": \"bisheng-toc-h2\",\n          \"href\": \"#子应用导出相应的生命周期钩子\",\n          \"title\": \"子应用导出相应的生命周期钩子\"\n        },\n        \"子应用导出相应的生命周期钩子\"\n      ]\n    ]\n  ]\n};"],"sourceRoot":""}